{"version":3,"file":"xliffmerge.builder_spec.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/builders/src/xliffmergebuilder/xliffmerge.builder_spec.ts"],"names":[],"mappings":"AAAA,+EAA+E;AAC/E,8EAA8E;AAC9E,yDAAyD;AACzD,gDAAgD;AAChD,oDAAoD;AACpD,gEAAgE;AAEhE,yCAAyC;AAEzC,8BAA8B;AAC9B,6FAA6F;AAE7F,yGAAyG;AACzG,iGAAiG;AACjG,uHAAuH;AACvH,sDAAsD;AACtD,wBAAwB;AACxB,qBAAqB;AACrB,MAAM;AAEN,+BAA+B;AAC/B,YAAY;AACZ,+DAA+D;AAC/D,2EAA2E;AAC3E,YAAY;AACZ,6CAA6C;AAC7C,kEAAkE;AAClE,6CAA6C;AAC7C,UAAU;AAEV,4BAA4B;AAC5B,kCAAkC;AAClC,QAAQ;AAER,6EAA6E;AAC7E,mDAAmD;AACnD,iDAAiD;AACjD,2GAA2G;AAC3G,qDAAqD;AACrD,gDAAgD;AAChD,oFAAoF;AACpF,yGAAyG;AACzG,UAAU;AAEV,mFAAmF;AACnF,mDAAmD;AACnD,oDAAoD;AACpD,iIAAiI;AACjI,qDAAqD;AACrD,yCAAyC;AACzC,oFAAoF;AACpF,yGAAyG;AACzG,UAAU;AAEV,6FAA6F;AAC7F,mDAAmD;AACnD,iDAAiD;AACjD,oDAAoD;AACpD,4EAA4E;AAC5E,+EAA+E;AAC/E,qBAAqB;AACrB,qDAAqD;AACrD,gDAAgD;AAChD,oFAAoF;AACpF,yGAAyG;AACzG,UAAU;AAEV,+EAA+E;AAC/E,mDAAmD;AACnD,+CAA+C;AAC/C,mCAAmC;AACnC,wCAAwC;AACxC,2CAA2C;AAC3C,2CAA2C;AAC3C,8BAA8B;AAC9B,gBAAgB;AAChB,aAAa;AACb,yFAAyF;AACzF,yFAAyF;AACzF,kGAAkG;AAClG,oDAAoD;AACpD,wDAAwD;AACxD,oFAAoF;AACpF,mDAAmD;AACnD,mDAAmD;AACnD,uHAAuH;AACvH,uHAAuH;AACvH,UAAU;AAEV,4EAA4E;AAC5E,mDAAmD;AACnD,gDAAgD;AAChD,mCAAmC;AACnC,wCAAwC;AACxC,2CAA2C;AAC3C,0CAA0C;AAC1C,gBAAgB;AAChB,aAAa;AACb,iCAAiC;AACjC,6DAA6D;AAC7D,6EAA6E;AAC7E,2DAA2D;AAC3D,+CAA+C;AAC/C,aAAa;AACb,yFAAyF;AACzF,yFAAyF;AACzF,gGAAgG;AAChG,kDAAkD;AAClD,sDAAsD;AACtD,kFAAkF;AAClF,+GAA+G;AAC/G,+GAA+G;AAC/G,UAAU;AACV,MAAM","sourcesContent":["// import {join, JsonObject, normalize, virtualFs} from '@angular-devkit/core';\r\n// import {Architect, BuilderOutput, Target} from '@angular-devkit/architect';\r\n// import {createArchitect, host} from './testing_utils';\r\n// import {TestLogger} from './testlogger_spec';\r\n// import {XliffmergeBuilderSchema} from './schema';\r\n// import {IConfigFile} from '@ngx-i18nsupport/ngx-i18nsupport';\r\n\r\n// describe('xliffmerge.builder', () => {\r\n\r\n//   let architect: Architect;\r\n//   const xliffmergeTargetSpec: Target = {project: 'hello-world-app', target: 'xliffmerge'};\r\n\r\n//   async function runXliffmergeBuilderOnTestWorkspace(configuration: XliffmergeBuilderSchema|undefined,\r\n//                                                  logger: TestLogger): Promise<BuilderOutput> {\r\n//     const run = await architect.scheduleTarget(xliffmergeTargetSpec, configuration as JsonObject, {logger: logger});\r\n//     const output: BuilderOutput = await run.result;\r\n//     await run.stop();\r\n//     return output;\r\n//   }\r\n\r\n//     beforeEach(async () => {\r\n//       /**\r\n//        * We are using a test workspace from the test folder.\r\n//        * In this workspace the xliffmerge builder is already configured.\r\n//        */\r\n//       await host.initialize().toPromise();\r\n//       const architectInfo = await createArchitect(host.root());\r\n//       architect = architectInfo.architect;\r\n//     });\r\n\r\n//   afterEach(async () => {\r\n//     host.restore().toPromise();\r\n//   });\r\n\r\n//     it('should show error when called with illegal profile', async () => {\r\n//         const logger = new TestLogger('logger');\r\n//         const profileName = 'nonexistentfile';\r\n//         const builderOutput = await runXliffmergeBuilderOnTestWorkspace({profile: profileName}, logger);\r\n//         expect(builderOutput.success).toBe(false);\r\n//         const msg = 'could not read profile';\r\n//         expect(logger.includes(msg)).toBe(true, `msg \"${msg}\" not found in log`);\r\n//         expect(logger.includes(profileName)).toBe(true, `filename \"${profileName}\" not found in log`);\r\n//     });\r\n\r\n//     it('should show error when called with illegal configuration', async () => {\r\n//         const logger = new TestLogger('logger');\r\n//         const xlfFileName = 'nonexistentxlffile';\r\n//         const builderOutput = await runXliffmergeBuilderOnTestWorkspace({xliffmergeOptions: {i18nFile: xlfFileName}}, logger);\r\n//         expect(builderOutput.success).toBe(false);\r\n//         const msg = 'is not readable';\r\n//         expect(logger.includes(msg)).toBe(true, `msg \"${msg}\" not found in log`);\r\n//         expect(logger.includes(xlfFileName)).toBe(true, `filename \"${xlfFileName}\" not found in log`);\r\n//     });\r\n\r\n//     it('should use profile when called with both profile and configuration', async () => {\r\n//         const logger = new TestLogger('logger');\r\n//         const profileName = 'nonexistentfile';\r\n//         const xlfFileName = 'nonexistentxlffile';\r\n//         const builderOutput = await runXliffmergeBuilderOnTestWorkspace({\r\n//           profile: profileName, xliffmergeOptions: {i18nFile: xlfFileName}},\r\n//           logger);\r\n//         expect(builderOutput.success).toBe(false);\r\n//         const msg = 'could not read profile';\r\n//         expect(logger.includes(msg)).toBe(true, `msg \"${msg}\" not found in log`);\r\n//         expect(logger.includes(profileName)).toBe(true, `filename \"${profileName}\" not found in log`);\r\n//     });\r\n\r\n//     it('should run successfully with given xliffmergeOptions', async () => {\r\n//         const logger = new TestLogger('logger');\r\n//         const configuration: IConfigFile = {\r\n//             xliffmergeOptions: {\r\n//                 'srcDir': 'src/i18n',\r\n//                 'genDir': 'src/i18nout',\r\n//                 languages: ['en', 'de'],\r\n//               verbose: true\r\n//             }\r\n//         };\r\n//         const generatedFileEN = join(normalize('src'),  'i18nout', 'messages.en.xlf');\r\n//         const generatedFileDE = join(normalize('src'),  'i18nout', 'messages.de.xlf');\r\n//         const builderOutput = await runXliffmergeBuilderOnTestWorkspace(configuration, logger);\r\n//         expect(builderOutput.success).toBe(true);\r\n//         const msg = 'WARNING: please translate file';\r\n//         expect(logger.includes(msg)).toBe(true, `msg \"${msg}\" not found in log`);\r\n//         host.scopedSync().read(generatedFileEN);\r\n//         host.scopedSync().read(generatedFileDE);\r\n//         expect(await host.scopedSync().exists(generatedFileEN)).toBe(true, `file ${generatedFileEN} not generated`);\r\n//         expect(await host.scopedSync().exists(generatedFileDE)).toBe(true, `file ${generatedFileDE} not generated`);\r\n//     });\r\n\r\n//     it('should run successfully with options from profile', async () => {\r\n//         const logger = new TestLogger('logger');\r\n//         const profileContent: IConfigFile = {\r\n//             xliffmergeOptions: {\r\n//                 'srcDir': 'src/i18n',\r\n//                 'genDir': 'src/i18nout',\r\n//                 languages: ['en', 'de']\r\n//             }\r\n//         };\r\n//       host.scopedSync().write(\r\n//             join(normalize('.'), 'xliffmergeconfig.json'),\r\n//             virtualFs.stringToFileBuffer(JSON.stringify(profileContent)));\r\n//         const configuration: XliffmergeBuilderSchema = {\r\n//             profile: 'xliffmergeconfig.json'\r\n//         };\r\n//         const generatedFileEN = join(normalize('src'),  'i18nout', 'messages.en.xlf');\r\n//         const generatedFileDE = join(normalize('src'),  'i18nout', 'messages.de.xlf');\r\n//       const builderOutput = await runXliffmergeBuilderOnTestWorkspace(configuration, logger);\r\n//       expect(builderOutput.success).toBe(true);\r\n//       const msg = 'WARNING: please translate file';\r\n//       expect(logger.includes(msg)).toBe(true, `msg \"${msg}\" not found in log`);\r\n//       expect(host.scopedSync().exists(generatedFileEN)).toBe(true, `file ${generatedFileEN} not generated`);\r\n//       expect(host.scopedSync().exists(generatedFileDE)).toBe(true, `file ${generatedFileDE} not generated`);\r\n//     });\r\n// });\r\n"]}