{"version":3,"file":"index_spec.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/addLanguage/index_spec.ts"],"names":[],"mappings":"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","sourcesContent":["// import { Tree } from '@angular-devkit/schematics';\r\n// import { SchematicTestRunner, UnitTestTree } from '@angular-devkit/schematics/testing';\r\n// import * as path from 'path';\r\n// import {\r\n//     readAngularJson,\r\n//     readPackageJson,\r\n//     readXliffmergeJson,\r\n//     workspaceOptions,\r\n//     appOptions,\r\n//     readXliffmergeConfigFromWorkspace\r\n// } from '../common/common-testing_spec';\r\n// import {AddLanguageOptions} from './schema';\r\n// import {WorkspaceSchema} from '../../schematics-core/utility/workspace-models';\r\n\r\n// const collectionPath = path.join(__dirname, '../collection.json');\r\n\r\n// describe('addLanguage', () => {\r\n//     const testRunner = new SchematicTestRunner('schematics', collectionPath);\r\n\r\n//     function runSchematic(options: AddLanguageOptions, tree: Tree): UnitTestTree {\r\n//         return testRunner.runSchematic('addLanguage', options, tree);\r\n//     }\r\n\r\n//     it('should throw an exception that there is no workspace when run on an empty tree', () => {\r\n//         try {\r\n//             runSchematic({}, Tree.empty());\r\n//             fail('expected exception (no workspace found) did not occur');\r\n//         } catch (e) {\r\n//             expect(e.message).toContain('Could not find a workspace');\r\n//         }\r\n//     });\r\n\r\n//     describe('with workspace without installed tooling', () => {\r\n\r\n//         let appTree: UnitTestTree;\r\n//         beforeEach(() => {\r\n//             appTree = testRunner.runExternalSchematic('@schematics/angular', 'workspace', workspaceOptions);\r\n//             appTree = testRunner.runExternalSchematic('@schematics/angular', 'application', appOptions, appTree);\r\n//         });\r\n\r\n//         it('should throw an exception when called with no existing project', () => {\r\n//             try {\r\n//                 runSchematic({project: 'foo'}, appTree);\r\n//                 fail('expected exception (workspace contains no project named) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('Workspace contains no project named');\r\n//             }\r\n//         });\r\n\r\n//         it('should throw an exception when called on a workspace without ngx-i18nsupport installed', () => {\r\n//             try {\r\n//                 runSchematic({language: 'de'}, appTree);\r\n//                 fail('expected exception (Config file \"xliffmerge.json\" not found.) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('No builder configuration and also no config file');\r\n//             }\r\n//         });\r\n//     });\r\n\r\n//     describe('with one instrumented project using old style xliffmerge command line and config file', () => {\r\n\r\n//         let appTree: UnitTestTree;\r\n//         beforeEach(() => {\r\n//             appTree = testRunner.runExternalSchematic('@schematics/angular', 'workspace', workspaceOptions);\r\n//             appTree = testRunner.runExternalSchematic('@schematics/angular', 'application', appOptions, appTree);\r\n//             appTree = testRunner.runSchematic('ng-add', {useXliffmergeBuilder: false}, appTree);\r\n//         });\r\n\r\n//         it('should throw an exception when called without a language', () => {\r\n//             try {\r\n//                 runSchematic({}, appTree);\r\n//                 fail('expected exception (At least 1 language must be specified.) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('At least 1 language must be specified.');\r\n//             }\r\n//         });\r\n\r\n//         it('should throw an exception when called with both language and languages', () => {\r\n//             try {\r\n//                 runSchematic({languages: 'a,b', language: 'c'}, appTree);\r\n//                 fail('expected exception (Only language as parameter or --languages can be used, not both.) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('Only language as parameter or --languages can be used, not both.');\r\n//             }\r\n//         });\r\n\r\n//         it('should throw an exception when called with any invalid language code', () => {\r\n//             try {\r\n//                 runSchematic({languages: 'a,b,x*'}, appTree);\r\n//                 fail('expected exception (is not a valid language code) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('is not a valid language code');\r\n//             }\r\n//         });\r\n\r\n//         it('should throw an exception when trying to add the default language', () => {\r\n//             try {\r\n//                 runSchematic({language: 'en'}, appTree);\r\n//                 fail('expected exception (Language \"en\" is already configured) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('Language \"en\" is already configured');\r\n//             }\r\n//         });\r\n\r\n//         it('should throw an exception when trying to add an already existing language', () => {\r\n//             // first add a language\r\n//             appTree = runSchematic({language: 'de'}, appTree);\r\n//             // then try to do it again\r\n//             try {\r\n//                 appTree = runSchematic({language: 'de'}, appTree);\r\n//                 fail('expected exception (Language \"de\" is already configured) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('Language \"de\" is already configured');\r\n//             }\r\n//         });\r\n\r\n//         it('should add a language to workspace', () => {\r\n//             const lang = 'de';\r\n//             const tree = runSchematic({language: lang}, appTree);\r\n//             // there should be a start script for new language\r\n//             const packageJson = readPackageJson(tree);\r\n//             const startScript = packageJson.scripts['start-' + lang];\r\n//             expect(startScript).toBeTruthy();\r\n//             expect(startScript).toBe(\r\n//                 'ng serve --configuration=' + lang);\r\n//             // there should be a build and serve configuration\r\n//             const angularJson: WorkspaceSchema = readAngularJson(tree);\r\n//             // @ts-ignore\r\n//             expect(angularJson.projects.bar.architect.build.configurations[lang]).toBeTruthy();\r\n//             // @ts-ignore\r\n//             expect(angularJson.projects.bar.architect.build.configurations[lang] as any).toEqual({\r\n//                 aot: true,\r\n//                 outputPath: 'dist/bar-de',\r\n//                 i18nFile: 'src/i18n/messages.de.xlf',\r\n//                 i18nFormat: 'xlf',\r\n//                 i18nLocale: 'de'\r\n//             });\r\n//             // @ts-ignore\r\n//             expect(angularJson.projects.bar.architect.serve.configurations[lang]).toBeTruthy();\r\n//             // @ts-ignore\r\n//             expect(angularJson.projects.bar.architect.serve.configurations[lang]).toEqual({\r\n//                 browserTarget: 'bar:build:de'\r\n//             });\r\n//             // there should be no addition in extract command, because it is read from xliffmerge.json\r\n//             const xliffmergeJson = readXliffmergeJson(tree, 'bar');\r\n//             expect(xliffmergeJson).toBeTruthy();\r\n//             if (xliffmergeJson && xliffmergeJson.xliffmergeOptions) {\r\n//                 expect(xliffmergeJson.xliffmergeOptions.languages).toEqual(['en', 'de']);\r\n//             }\r\n//             // TODO check that it is not in extract-script\r\n//         });\r\n\r\n//     });\r\n\r\n//     describe('with one instrumented project using builder', () => {\r\n\r\n//         let appTree: UnitTestTree;\r\n//         beforeEach(() => {\r\n//             appTree = testRunner.runExternalSchematic('@schematics/angular', 'workspace', workspaceOptions);\r\n//             appTree = testRunner.runExternalSchematic('@schematics/angular', 'application', appOptions, appTree);\r\n//             appTree = testRunner.runSchematic('ng-add', {}, appTree);\r\n//         });\r\n\r\n//         it('should throw an exception when called without a language', () => {\r\n//             try {\r\n//                 runSchematic({}, appTree);\r\n//                 fail('expected exception (At least 1 language must be specified.) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('At least 1 language must be specified.');\r\n//             }\r\n//         });\r\n\r\n//         it('should throw an exception when called with both language and languages', () => {\r\n//             try {\r\n//                 runSchematic({languages: 'a,b', language: 'c'}, appTree);\r\n//                 fail('expected exception (Only language as parameter or --languages can be used, not both.) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('Only language as parameter or --languages can be used, not both.');\r\n//             }\r\n//         });\r\n\r\n//         it('should throw an exception when called with any invalid language code', () => {\r\n//             try {\r\n//                 runSchematic({languages: 'a,b,x*'}, appTree);\r\n//                 fail('expected exception (is not a valid language code) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('is not a valid language code');\r\n//             }\r\n//         });\r\n\r\n//         it('should throw an exception when trying to add the default language', () => {\r\n//             try {\r\n//                 runSchematic({language: 'en'}, appTree);\r\n//                 fail('expected exception (Language \"en\" is already configured) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('Language \"en\" is already configured');\r\n//             }\r\n//         });\r\n\r\n//         it('should throw an exception when trying to add an already existing language', () => {\r\n//             // first add a language\r\n//             appTree = runSchematic({language: 'de'}, appTree);\r\n//             // then try to do it again\r\n//             try {\r\n//                 runSchematic({language: 'de'}, appTree);\r\n//                 fail('expected exception (Language \"de\" is already configured) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('Language \"de\" is already configured');\r\n//             }\r\n//         });\r\n\r\n//         it('should add a language to workspace', () => {\r\n//             const lang = 'de';\r\n//             const tree = runSchematic({language: lang}, appTree);\r\n//             // there should be a start script for new language\r\n//             const packageJson = readPackageJson(tree);\r\n//             const startScript = packageJson.scripts['start-' + lang];\r\n//             expect(startScript).toBeTruthy();\r\n//             expect(startScript).toBe(\r\n//                 'ng serve --configuration=' + lang);\r\n//             // there should be a build and serve configuration\r\n//             const angularJson: WorkspaceSchema = readAngularJson(tree);\r\n//             // @ts-ignore\r\n//             expect(angularJson.projects.bar.architect.build.configurations[lang]).toBeTruthy();\r\n//             // @ts-ignore\r\n//             expect(angularJson.projects.bar.architect.build.configurations[lang] as any).toEqual({\r\n//                 aot: true,\r\n//                 outputPath: 'dist/bar-de',\r\n//                 i18nFile: 'src/i18n/messages.de.xlf',\r\n//                 i18nFormat: 'xlf',\r\n//                 i18nLocale: 'de'\r\n//             });\r\n//             // @ts-ignore\r\n//             expect(angularJson.projects.bar.architect.serve.configurations[lang]).toBeTruthy();\r\n//             // @ts-ignore\r\n//             expect(angularJson.projects.bar.architect.serve.configurations[lang]).toEqual({\r\n//                 browserTarget: 'bar:build:de'\r\n//             });\r\n//             // there should be no addition in extract command, because it is read from xliffmerge.json\r\n//             const xliffmergeJson = readXliffmergeConfigFromWorkspace(tree, 'bar');\r\n//             expect(xliffmergeJson).toBeTruthy();\r\n//             if (xliffmergeJson && xliffmergeJson.xliffmergeOptions) {\r\n//                 expect(xliffmergeJson.xliffmergeOptions.languages).toEqual(['en', 'de']);\r\n//             }\r\n//         });\r\n\r\n//     });\r\n// });\r\n"]}