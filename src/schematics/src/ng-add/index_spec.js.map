{"version":3,"file":"index_spec.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/ng-add/index_spec.ts"],"names":[],"mappings":"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","sourcesContent":["// import { Tree} from '@angular-devkit/schematics';\r\n// import {Schema as ApplicationOptions} from '@schematics/angular/application/schema';\r\n// import {Schema as LibraryOptions} from '@schematics/angular/application/schema';\r\n// import { SchematicTestRunner, UnitTestTree } from '@angular-devkit/schematics/testing';\r\n// import {IXliffMergeOptions} from '@ngx-i18nsupport/ngx-i18nsupport';\r\n// import * as pathUtils from 'path';\r\n// import {extractScriptName, xliffmergeBuilderName, xliffmergePackage, xliffmergeVersion} from '../common';\r\n// import {NgAddOptions} from './schema';\r\n// import {readAngularJson, readAsJson, readPackageJson, workspaceOptions, appOptions, libOptions} from '../common/common-testing_spec';\r\n// import {WorkspaceSchema} from '../../schematics-core/utility/workspace-models';\r\n// import {IConfigFile} from '@ngx-i18nsupport/ngx-i18nsupport';\r\n\r\n// const collectionPath = pathUtils.join(__dirname, '../collection.json');\r\n\r\n// describe('ng-add', () => {\r\n\r\n//   const testRunner = new SchematicTestRunner('schematics', collectionPath);\r\n\r\n//   function runSchematic(options: NgAddOptions, tree: Tree): UnitTestTree {\r\n//       return testRunner.runSchematic('ng-add', options, tree);\r\n//   }\r\n\r\n//   it('should throw an exception that there is no workspace when run on an empty tree', () => {\r\n//     try {\r\n//         runSchematic({}, Tree.empty());\r\n//         fail('expected exception (no workspace found) did not occur');\r\n//     } catch (e) {\r\n//         expect(e.message).toContain('Could not find a workspace');\r\n//     }\r\n//   });\r\n\r\n//   describe('with one project', () => {\r\n\r\n//       let appTree: UnitTestTree;\r\n//       beforeEach(async () => {\r\n//           appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions).toPromise();\r\n//           appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree).toPromise();\r\n//       });\r\n\r\n//       it('should throw an exception when called with no existing project', () => {\r\n//           try {\r\n//               runSchematic({project: 'foo'}, appTree);\r\n//               fail('expected exception (workspace contains no project named) did not occur');\r\n//           } catch (e) {\r\n//               expect(e.message).toContain('Workspace contains no project named');\r\n//           }\r\n//       });\r\n\r\n//       it('should throw an exception when called with invalid language code as default language', () => {\r\n//           try {\r\n//               runSchematic({i18nLocale: 'a,b'}, appTree);\r\n//               fail('expected exception (is not a valid language code) did not occur');\r\n//           } catch (e) {\r\n//               expect(e.message).toContain('is not a valid language code');\r\n//           }\r\n//       });\r\n\r\n//       it('should throw an exception when called with any invalid language code', () => {\r\n//           try {\r\n//               runSchematic({languages: 'a,b,x*'}, appTree);\r\n//               fail('expected exception (is not a valid language code) did not occur');\r\n//           } catch (e) {\r\n//               expect(e.message).toContain('is not a valid language code');\r\n//           }\r\n//       });\r\n\r\n//       it('should create xliffmerge configuration file when called with doNotUseBuilder option', () => {\r\n//           const tree = runSchematic({useXliffmergeBuilder: false}, appTree);\r\n//           expect(tree.files).toContain('/projects/bar/xliffmerge.json');\r\n//           const configFile = readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, '/projects/bar/xliffmerge.json');\r\n//           expect(configFile.xliffmergeOptions).toBeTruthy();\r\n//           expect(configFile.xliffmergeOptions.i18nFormat).toBe('xlf');\r\n//           expect(configFile.xliffmergeOptions.defaultLanguage).toBe('en');\r\n//           expect(configFile.xliffmergeOptions.languages).toEqual(['en']);\r\n//           expect(configFile.xliffmergeOptions.srcDir).toBe('src/i18n');\r\n//           expect(configFile.xliffmergeOptions.genDir).toBe('src/i18n');\r\n//       });\r\n\r\n//       it('should create xliffmerge configuration file with first given language as default', () => {\r\n//           const tree = runSchematic({useXliffmergeBuilder: false, languages: 'de'}, appTree);\r\n//           expect(tree.files).toContain('/projects/bar/xliffmerge.json');\r\n//           const configFile = readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, '/projects/bar/xliffmerge.json');\r\n//           expect(configFile.xliffmergeOptions).toBeTruthy();\r\n//           // de is default because it is the first in list\r\n//           expect(configFile.xliffmergeOptions.defaultLanguage).toBe('de');\r\n//           expect(configFile.xliffmergeOptions.languages).toEqual(['de']);\r\n//       });\r\n\r\n//       it('should create xliffmerge configuration file containing all given languages', () => {\r\n//           const tree = runSchematic({useXliffmergeBuilder: false, languages: 'de,fr,ru'}, appTree);\r\n//           expect(tree.files).toContain('/projects/bar/xliffmerge.json');\r\n//           const configFile = readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, '/projects/bar/xliffmerge.json');\r\n//           expect(configFile.xliffmergeOptions).toBeTruthy();\r\n//           // de is default because it is the first in list\r\n//           expect(configFile.xliffmergeOptions.defaultLanguage).toBe('de');\r\n//           expect(configFile.xliffmergeOptions.languages).toEqual(['de', 'fr', 'ru']);\r\n//       });\r\n\r\n//       it('should create xliffmerge configuration file containing all given languages and default language', () => {\r\n//           const tree = runSchematic({useXliffmergeBuilder: false, i18nLocale: 'en', languages: 'de,fr,ru'}, appTree);\r\n//           expect(tree.files).toContain('/projects/bar/xliffmerge.json');\r\n//           const configFile = readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, '/projects/bar/xliffmerge.json');\r\n//           expect(configFile.xliffmergeOptions).toBeTruthy();\r\n//           // en is default, becuase it was explicitly set\r\n//           expect(configFile.xliffmergeOptions.defaultLanguage).toBe('en');\r\n//           expect(configFile.xliffmergeOptions.languages).toEqual(['en', 'de', 'fr', 'ru']);\r\n//       });\r\n\r\n//       it('should create xliffmerge configuration with specified xlf format', () => {\r\n//           const tree = runSchematic({useXliffmergeBuilder: false, i18nLocale: 'en', i18nFormat: 'xlf2'}, appTree);\r\n//           expect(tree.files).toContain('/projects/bar/xliffmerge.json');\r\n//           const configFile = readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, '/projects/bar/xliffmerge.json');\r\n//           expect(configFile.xliffmergeOptions).toBeTruthy();\r\n//           expect(configFile.xliffmergeOptions.i18nFormat).toBe('xlf2');\r\n//       });\r\n\r\n//       it('should add xliffmerge dev dependency to package.json', () => {\r\n//           const tree = runSchematic( {}, appTree);\r\n//           const packageJson = readPackageJson(tree);\r\n//           expect(packageJson.devDependencies[xliffmergePackage]).toBe(xliffmergeVersion);\r\n//       });\r\n\r\n//       it('should add configurations for non default languages to angular.json', () => {\r\n//           const tree = runSchematic({languages: 'en,de'}, appTree);\r\n//           const angularJson: WorkspaceSchema = readAngularJson(tree);\r\n//           // @ts-ignore\r\n//           expect(angularJson.projects.bar.architect.build.configurations.en).toBeFalsy();\r\n//           // @ts-ignore\r\n//           expect(angularJson.projects.bar.architect.build.configurations.de).toBeTruthy();\r\n//           // @ts-ignore\r\n//           expect(angularJson.projects.bar.architect.build.configurations.de as any).toEqual({\r\n//               aot: true,\r\n//               outputPath: 'dist/bar-de',\r\n//               i18nFile: 'src/i18n/messages.de.xlf',\r\n//               i18nFormat: 'xlf',\r\n//               i18nLocale: 'de'\r\n//           });\r\n//           // @ts-ignore\r\n//           expect(angularJson.projects.bar.architect.serve.configurations.de).toBeTruthy();\r\n//           // @ts-ignore\r\n//           expect(angularJson.projects.bar.architect.serve.configurations.de).toEqual({\r\n//               browserTarget: 'bar:build:de'\r\n//           });\r\n//       });\r\n\r\n//       it('should add npm script \"extract-i18n\" to package.json using command line xliffmerge', () => {\r\n//           const tree = runSchematic({useXliffmergeBuilder: false}, appTree);\r\n//           const packageJson = readPackageJson(tree);\r\n//           const extractScript = packageJson.scripts[extractScriptName('bar', true)];\r\n//           expect(extractScript).toBeTruthy();\r\n//           expect(extractScript).toBe(\r\n//               'ng xi18n bar --i18n-format xlf --output-path i18n --i18n-locale en && xliffmerge --profile xliffmerge.json');\r\n//       });\r\n\r\n//       it('should add npm script \"extract-i18n\" to package.json including language list as command line parameter', () => {\r\n//           const tree = runSchematic({useXliffmergeBuilder: false, useCommandlineForLanguages: true, languages: 'en,de'}, appTree);\r\n//           const packageJson = readPackageJson(tree);\r\n//           const extractScript = packageJson.scripts['extract-i18n'];\r\n//           expect(extractScript).toBeTruthy();\r\n//           expect(extractScript).toBe(\r\n//               'ng xi18n bar --i18n-format xlf --output-path i18n --i18n-locale en && xliffmerge --profile xliffmerge.json en de');\r\n//       });\r\n\r\n//       it('should add npm script \"start-xyz\" to package.json when called with language xyz', () => {\r\n//           const lang = 'xyz';\r\n//           const tree = runSchematic({useXliffmergeBuilder: false, i18nLocale: 'de', languages: lang}, appTree);\r\n//           const packageJson = readPackageJson(tree);\r\n//           const startScriptDefaultLang = packageJson.scripts['start-de'];\r\n//           expect(startScriptDefaultLang).toBeFalsy(); // no start script for default lang needed\r\n//           const startScript = packageJson.scripts['start-' + lang];\r\n//           expect(startScript).toBeTruthy();\r\n//           expect(startScript).toBe(\r\n//               'ng serve --configuration=' + lang);\r\n//       });\r\n\r\n//       it('should add npm script \"start-xyz\" to package.json when called with language xyz' +\r\n//           'even if project is set, but it is the default project', () => {\r\n//           // normally, when you specify a project \"bar\", start script should be called start-bar-xyz\r\n//           // but if bar is the default project, it is just called start-xyz.\r\n//           const lang = 'xyz';\r\n//           const tree = runSchematic({useXliffmergeBuilder: false, i18nLocale: 'de', project: 'bar', languages: lang}, appTree);\r\n//           const packageJson = readPackageJson(tree);\r\n//           const startScriptDefaultLang = packageJson.scripts['start-de'];\r\n//           expect(startScriptDefaultLang).toBeFalsy(); // no start script for default lang needed\r\n//           const startScript = packageJson.scripts['start-' + lang];\r\n//           expect(startScript).toBeTruthy();\r\n//           expect(startScript).toBe(\r\n//               'ng serve --configuration=' + lang);\r\n//       });\r\n\r\n//       it('should configure builder with defaults when called without any parameters', () => {\r\n//           const tree = runSchematic({}, appTree);\r\n//           const angularJson = readAngularJson(tree);\r\n//           // @ts-ignore\r\n//           const builderEntry: any = angularJson.projects['bar'].architect[xliffmergeBuilderName];\r\n//           expect(builderEntry).toBeTruthy('no xliffmerge builder entry found');\r\n//           expect(builderEntry.builder).toBe('@ngx-i18nsupport/tooling:xliffmerge');\r\n//           const options: IConfigFile = builderEntry.options;\r\n//           expect(options).toBeTruthy('no xliffmerge builder options found');\r\n//           expect(options.xliffmergeOptions).toBeTruthy();\r\n//           if (options.xliffmergeOptions) {\r\n//               expect(options.xliffmergeOptions.i18nFormat).toBe('xlf');\r\n//               expect(options.xliffmergeOptions.srcDir).toBe('src/i18n');\r\n//               expect(options.xliffmergeOptions.genDir).toBe('src/i18n');\r\n//               expect(options.xliffmergeOptions.defaultLanguage).toBe('en');\r\n//               expect(options.xliffmergeOptions.languages).toEqual(['en']);\r\n//           }\r\n//       });\r\n\r\n//       it('should configure builder with given parametest', () => {\r\n//           const tree = runSchematic({i18nFormat: 'xlf2', localePath: 'xy', i18nLocale: 'de', languages: 'en,fr,ru'}, appTree);\r\n//           const angularJson = readAngularJson(tree);\r\n//           // @ts-ignore\r\n//           const builderEntry: any = angularJson.projects['bar'].architect[xliffmergeBuilderName];\r\n//           expect(builderEntry).toBeTruthy('no xliffmerge builder entry found');\r\n//           expect(builderEntry.builder).toBe('@ngx-i18nsupport/tooling:xliffmerge');\r\n//           const options: IConfigFile = builderEntry.options;\r\n//           expect(options).toBeTruthy('no xliffmerge builder options found');\r\n//           expect(options.xliffmergeOptions).toBeTruthy();\r\n//           if (options.xliffmergeOptions) {\r\n//               expect(options.xliffmergeOptions.i18nFormat).toBe('xlf2');\r\n//               expect(options.xliffmergeOptions.srcDir).toBe('src/xy');\r\n//               expect(options.xliffmergeOptions.genDir).toBe('src/xy');\r\n//               expect(options.xliffmergeOptions.defaultLanguage).toBe('de');\r\n//               expect(options.xliffmergeOptions.languages).toEqual(['de', 'en', 'fr', 'ru']);\r\n//           }\r\n//       });\r\n\r\n//       it('should add npm script \"extract-i18n\" to package.json using builder xliffmerge', () => {\r\n//           const tree = runSchematic({}, appTree);\r\n//           const packageJson = readPackageJson(tree);\r\n//           const extractScript = packageJson.scripts[extractScriptName('bar', true)];\r\n//           expect(extractScript).toBeTruthy();\r\n//           expect(extractScript).toBe(\r\n//               'ng xi18n bar --i18n-format xlf --output-path i18n --i18n-locale en && ng run bar:xliffmerge');\r\n//       });\r\n\r\n//       it('should add npm script \"start-xyz\" to package.json when called with language xyz', () => {\r\n//           const lang = 'xyz';\r\n//           const tree = runSchematic({i18nLocale: 'de', languages: lang}, appTree);\r\n//           const packageJson = readPackageJson(tree);\r\n//           const startScriptDefaultLang = packageJson.scripts['start-de'];\r\n//           expect(startScriptDefaultLang).toBeFalsy(); // no start script for default lang needed\r\n//           const startScript = packageJson.scripts['start-' + lang];\r\n//           expect(startScript).toBeTruthy();\r\n//           expect(startScript).toBe(\r\n//               'ng serve --configuration=' + lang);\r\n//       });\r\n\r\n//       it('should add npm script \"start-xyz\" to package.json when called with language xyz' +\r\n//           'even if project is set, but it is the default project', () => {\r\n//           // normally, when you specify a project \"bar\", start script should be called start-bar-xyz\r\n//           // but if bar is the default project, it is just called start-xyz.\r\n//           const lang = 'xyz';\r\n//           const tree = runSchematic({i18nLocale: 'de', project: 'bar', languages: lang}, appTree);\r\n//           const packageJson = readPackageJson(tree);\r\n//           const startScriptDefaultLang = packageJson.scripts['start-de'];\r\n//           expect(startScriptDefaultLang).toBeFalsy(); // no start script for default lang needed\r\n//           const startScript = packageJson.scripts['start-' + lang];\r\n//           expect(startScript).toBeTruthy();\r\n//           expect(startScript).toBe(\r\n//               'ng serve --configuration=' + lang);\r\n//       });\r\n//   });\r\n\r\n//     describe('with multiple projects', () => {\r\n\r\n//         const appOptions1: ApplicationOptions = Object.assign({}, appOptions, {name: 'bar'});\r\n\r\n//         const appOptions2: ApplicationOptions = Object.assign({}, appOptions, {name: 'foo'});\r\n\r\n//         const libOptions1: LibraryOptions = Object.assign({}, libOptions, {name: 'foolib'});\r\n\r\n//         let appTree: UnitTestTree;\r\n//         beforeEach(async () => {\r\n//             appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions).toPromise();\r\n//             appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'application', appOptions1, appTree).toPromise();\r\n//             appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'application', appOptions2, appTree).toPromise();\r\n//             appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'library', libOptions1, appTree).toPromise();\r\n//         });\r\n\r\n//         it('should throw an exception when called with a library project', () => {\r\n//             try {\r\n//                 runSchematic({project: 'foolib'}, appTree);\r\n//                 fail('expected exception (called on library) did not occur');\r\n//             } catch (e) {\r\n//                 expect(e.message).toContain('Project must be of type \"application\"');\r\n//             }\r\n//         });\r\n\r\n//         it('should add npm script \"start-foolib-xyz\" to package.json when called with language xyz', () => {\r\n//             // when you specify a project \"foo\", start script should be called start-foo-xyz\r\n//             const lang = 'xyz';\r\n//             const tree = runSchematic({i18nLocale: 'de', project: 'foo', languages: lang}, appTree);\r\n//             const packageJson = readPackageJson(tree);\r\n//             const startScriptDefaultLang = packageJson.scripts['start-de'];\r\n//             expect(startScriptDefaultLang).toBeFalsy(); // no start script for default lang needed\r\n//             const startScript = packageJson.scripts['start-foo-' + lang];\r\n//             expect(startScript).toBeTruthy();\r\n//             expect(startScript).toBe(\r\n//                 'ng serve foo --configuration=' + lang);\r\n//         });\r\n\r\n//         it('should add npm script \"extract-i18n\" to package.json using command line xliffmerge', () => {\r\n//             const tree = runSchematic({project: 'foo', useXliffmergeBuilder: false}, appTree);\r\n//             const packageJson = readPackageJson(tree);\r\n//             const extractScript = packageJson.scripts[extractScriptName('foo', false)];\r\n//             expect(extractScript).toBeTruthy();\r\n//             // here output-path should be src/i18n, because it is relative to project root for non default projects\r\n//             expect(extractScript).toBe(\r\n//                 'ng xi18n foo --i18n-format xlf --output-path src/i18n --i18n-locale en && xliffmerge --profile xliffmerge.json');\r\n//         });\r\n\r\n//     });\r\n// });\r\n"]}