{"version":3,"file":"index_spec.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/ng-update/index_spec.ts"],"names":[],"mappings":"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","sourcesContent":["// import {SchematicTestRunner, UnitTestTree} from '@angular-devkit/schematics/testing';\r\n// import {HostTree} from '@angular-devkit/schematics';\r\n// import {virtualFs} from '@angular-devkit/core';\r\n// import {NgUpdateOptions} from './schema';\r\n// import {\r\n//     BrowserBuilderOptions,\r\n//     Builders,\r\n//     ProjectType,\r\n//     WorkspaceProject,\r\n//     WorkspaceSchema\r\n// } from '../../schematics-core/utility/workspace-models';\r\n// import {IConfigFile, IXliffMergeOptions} from '@ngx-i18nsupport/ngx-i18nsupport';\r\n// import {readAngularJson, readPackageJson} from '../common/common-testing_spec';\r\n// import {extractScriptName, IPackageJson, xliffmergeBuilderName, xliffmergePackage, xliffmergeVersion} from '../common';\r\n\r\n// interface ProjectOptions {\r\n//     name: string;\r\n//     isDefaultProject?: boolean;\r\n//     useXliffmerge?: boolean;\r\n//     useXliffmergeBuilder?: boolean;\r\n//     languages?: string[];\r\n// }\r\n\r\n// interface PackageJsonOptions {\r\n//     isLocalPackageJson?: boolean; // false for /package.json, true for /projects/<project>/package.json\r\n//     project: string; // projectname for extract script\r\n//     isDefaultProject?: boolean;\r\n//     createExtractScriptCommandline?: boolean;\r\n//     createExtractScriptBuilder?: boolean;\r\n//     xliffmergeConfigFilePath?: string;\r\n//     useCommandlineForLanguages?: boolean;\r\n//     languages?: string[];\r\n// }\r\n\r\n// interface XlifmergeConfigOptions {\r\n//     project: string;\r\n//     file: string;\r\n//     xliffmergeOptions: IXliffMergeOptions;\r\n// }\r\n\r\n// describe('Migration to v1.1', () => {\r\n\r\n//     function angularJsonProjectConfig(options: ProjectOptions): WorkspaceProject<ProjectType> {\r\n//         const config = JSON.parse(JSON.stringify(projectWithoutXliffmerge));\r\n//         config.root = options.isDefaultProject ? '' : `/${options.name}`;\r\n//         if (options.useXliffmerge) {\r\n//             if (options.useXliffmergeBuilder) {\r\n//                 // TODO\r\n//             } else {\r\n//                 // commandline\r\n//                 if (options.languages) {\r\n//                     options.languages.forEach(lang => {\r\n//                         // @ts-ignore\r\n//                         config.architect.build.configurations[lang] = {\r\n//                             aot: true,\r\n//                             outputPath: `dist/${options.name}-${lang}`,\r\n//                             i18nFile: `src/i18n/messages.${lang}.xlf`,\r\n//                             i18nFormat: 'xlf',\r\n//                             i18nLocale: lang\r\n//                         } as BrowserBuilderOptions;\r\n//                     });\r\n//                 }\r\n//             }\r\n//         }\r\n//         return config;\r\n//     }\r\n\r\n//     function angularJson(projects: ProjectOptions[]): Object {\r\n//         const angularJsonContent = JSON.parse(JSON.stringify(angularJsonBaseConfig));\r\n//         projects.forEach(options => {\r\n//             angularJsonContent.projects[options.name] = angularJsonProjectConfig(options);\r\n//         });\r\n//         return angularJsonContent;\r\n//     }\r\n\r\n//     function packageJson(options: PackageJsonOptions): Object {\r\n//         const packageJsonContent = JSON.parse(JSON.stringify(packageJsonWithoutXliffmerge));\r\n//         if (options.createExtractScriptCommandline) {\r\n//             let languages = '';\r\n//             if (options.useCommandlineForLanguages && options.languages) {\r\n//                 for (let i = 0; i < options.languages.length; i++) {\r\n//                     if (i > 0) {\r\n//                         languages += ' ';\r\n//                     }\r\n//                     languages += options.languages[i];\r\n//                 }\r\n//             }\r\n//             const i18nFormat = 'xlf';\r\n//             const localeDir = 'src/i18n';\r\n//             const defaultLanguage = 'en';\r\n//             const scriptName = extractScriptName(options.project, !!options.isDefaultProject);\r\n//             // @ts-ignore\r\n//             packageJsonContent.scripts[scriptName] =\r\n//                 `ng xi18n ${options.project} --i18n-format ${i18nFormat} --output-path ${localeDir} --i18n-locale ${defaultLanguage}\\\r\n//  && xliffmerge --profile ${options.xliffmergeConfigFilePath} ${languages}`;\r\n//         }\r\n//         if (options.createExtractScriptBuilder) {\r\n//             // @ts-ignore\r\n//             packageJsonContent.scripts['extract-i18n'] = `todo`;\r\n//         }\r\n//         return packageJsonContent;\r\n//     }\r\n\r\n//     function xliffmergeJson(options: XlifmergeConfigOptions): IConfigFile {\r\n//         return {\r\n//             xliffmergeOptions: options.xliffmergeOptions\r\n//         };\r\n//     }\r\n\r\n//     function createHost(projects: ProjectOptions[],\r\n//                         packageJsons: PackageJsonOptions[],\r\n//                         configs: XlifmergeConfigOptions[]): virtualFs.test.TestHost {\r\n//         const map: {[path: string]: string} = {};\r\n//         map['/angular.json'] = JSON.stringify(angularJson(projects), null, 2);\r\n//         packageJsons.forEach(option => {\r\n//             const packageJsonPath = (option.isLocalPackageJson) ? `/${option.project}/package.json` : '/package.json';\r\n//             map[packageJsonPath] = JSON.stringify(packageJson(option), null, 2);\r\n//         });\r\n//         configs.forEach(option => {\r\n//             map[`/projects/${option.project}/${option.file}`] = JSON.stringify(xliffmergeJson(option), null, 2);\r\n//         });\r\n//         return new virtualFs.test.TestHost(map);\r\n//     }\r\n\r\n//     /*\r\n//     * The following cases are handled by the migration schemactics:\r\n//     * - Workspace projects containing no xliffmerge will not be touched.\r\n//     * - Workspace projects containing xliffmerge pre 1.0 will are migrated to 1.1 builder configuration\r\n//     * - Workspace projects containing 1.0 xliffmerge command line extraction are migrated to 1.1 builder configuration\r\n//      */\r\n//     const testRunner = new SchematicTestRunner(\r\n//         'migrations',\r\n//         require.resolve('../migration-collection.json'),\r\n//     );\r\n//     const defaultOptions: NgUpdateOptions = {};\r\n//     let host: virtualFs.test.TestHost;\r\n//     let appTree: UnitTestTree;\r\n//     const projectWithoutXliffmerge: WorkspaceProject<ProjectType> = {\r\n//         root: '',\r\n//         sourceRoot: 'src',\r\n//         projectType: ProjectType.Application,\r\n//         prefix: 'app',\r\n//         schematics: {},\r\n//         architect: {\r\n//             build: {\r\n//                 builder: Builders.Browser,\r\n//                 options: {\r\n//                     outputPath: 'dist/sampleapp',\r\n//                     index: 'src/index.html',\r\n//                     main: 'src/main.ts',\r\n//                     polyfills: 'src/polyfills.ts',\r\n//                     tsConfig: 'src/tsconfig.app.json',\r\n//                     assets: [],\r\n//                     styles: [\r\n//                         'src/styles.css'\r\n//                     ],\r\n//                     scripts: []\r\n//                 },\r\n//                 configurations: {\r\n//                     production: {\r\n//                         fileReplacements: [\r\n//                             {\r\n//                                 replace: 'src/environments/environment.ts',\r\n//                                 with: 'src/environments/environment.prod.ts'\r\n//                             }\r\n//                         ],\r\n//                         optimization: true,\r\n//                         outputHashing: 'all',\r\n//                         sourceMap: false,\r\n//                         extractCss: true,\r\n//                         namedChunks: false,\r\n//                         aot: true,\r\n//                         extractLicenses: true,\r\n//                         vendorChunk: false,\r\n//                         buildOptimizer: true\r\n//                     }\r\n//                 }\r\n//             },\r\n//             serve: {\r\n//                 builder: Builders.DevServer,\r\n//                 options: {\r\n//                     browserTarget: 'sampleapp:build'\r\n//                 },\r\n//                 configurations: {\r\n//                     production: {\r\n//                         browserTarget: 'sampleapp:build:production'\r\n//                     }\r\n//                 }\r\n//             },\r\n//             'extract-i18n': {\r\n//                 builder: Builders.ExtractI18n,\r\n//                 options: {\r\n//                     browserTarget: 'sampleapp:build'\r\n//                 }\r\n//             },\r\n//             test: {\r\n//                 builder: Builders.Karma,\r\n//                 options: {\r\n//                     main: 'src/test.ts',\r\n//                     polyfills: 'src/polyfills.ts',\r\n//                     tsConfig: 'src/tsconfig.spec.json',\r\n//                     karmaConfig: 'src/karma.conf.js',\r\n//                     styles: [\r\n//                         'src/styles.css'\r\n//                     ],\r\n//                     scripts: [],\r\n//                     assets: [\r\n//                     ]\r\n//                 }\r\n//             },\r\n//             lint: {\r\n//                 builder: Builders.TsLint,\r\n//                 options: {\r\n//                     tsConfig: [\r\n//                         'src/tsconfig.app.json',\r\n//                         'src/tsconfig.spec.json'\r\n//                     ],\r\n//                     exclude: [\r\n//                         '**/node_modules/**'\r\n//                     ]\r\n//                 }\r\n//             }\r\n//         }\r\n//     };\r\n//     const angularJsonBaseConfig: WorkspaceSchema = {\r\n//         $schema: './node_modules/@angular/cli/lib/config/schema.json',\r\n//         version: 1,\r\n//         newProjectRoot: 'projects',\r\n//         projects: {\r\n//         },\r\n//         defaultProject: 'sampleapp'\r\n//     };\r\n//     const packageJsonWithoutXliffmerge = {\r\n//         name: 'blah',\r\n//         scripts: {}\r\n//     };\r\n\r\n//     beforeEach(() => {\r\n//         appTree = new UnitTestTree(new HostTree());\r\n//     });\r\n\r\n//     describe('Migration from pre 1.0 to 1.1', () => {\r\n\r\n//     });\r\n\r\n//     describe('Migration from 1.0 to 1.1', () => {\r\n\r\n//         beforeEach(() => {\r\n//         });\r\n\r\n//         it('should log error on empty workspace', () => {\r\n//             host = createHost([], [], []);\r\n//             appTree = new UnitTestTree(new HostTree(host));\r\n//             let loggerOutput = '';\r\n//             testRunner.logger.subscribe(entry => {\r\n//                 loggerOutput = loggerOutput + entry.message;\r\n//             });\r\n//             appTree = testRunner.runSchematic('update-1', defaultOptions, appTree);\r\n//             expect(loggerOutput).toContain('Did not find any projects in angular.json');\r\n//         });\r\n\r\n//         it('should log message on workspace with no projects containing xliffmerge', () => {\r\n//             const noXliffmergeProject: ProjectOptions = {\r\n//                 name: 'projectwithoutxlifmerge'\r\n//             };\r\n//             const packageOptions: PackageJsonOptions = {\r\n//                 project: ''\r\n//             };\r\n//             host = createHost([noXliffmergeProject], [packageOptions], []);\r\n//             appTree = new UnitTestTree(new HostTree(host));\r\n//             let loggerOutput = '';\r\n//             testRunner.logger.subscribe(entry => {\r\n//                 loggerOutput = loggerOutput + entry.message;\r\n//             });\r\n//             appTree = testRunner.runSchematic('update-1', defaultOptions, appTree);\r\n//             expect(loggerOutput).toContain('Did not find any projects using xliffmerge in angular.json');\r\n//         });\r\n\r\n//         it('should show error when there is a missing config file', () => {\r\n//             const xliffmergeProject: ProjectOptions = {\r\n//                 name: 'projectWithXliffmerge'\r\n//             };\r\n//             const packageOptions: PackageJsonOptions = {\r\n//                 project: xliffmergeProject.name,\r\n//                 createExtractScriptCommandline: true,\r\n//                 xliffmergeConfigFilePath: 'test/xliffmerge.config',\r\n//                 languages: ['en', 'de']\r\n//             };\r\n//             host = createHost([xliffmergeProject], [packageOptions], []);\r\n//             appTree = new UnitTestTree(new HostTree(host));\r\n//             let loggerOutput = '';\r\n//             testRunner.logger.subscribe(entry => {\r\n//                 loggerOutput = loggerOutput + entry.message;\r\n//             });\r\n//             appTree = testRunner.runSchematic('update-1', defaultOptions, appTree);\r\n//             expect(loggerOutput).toContain('Could not find config file \"//test/xliffmerge.config\"');\r\n//         });\r\n\r\n//         it('should migrate extraction via command line to extraction via builder', () => {\r\n//             const xliffmergeProject: ProjectOptions = {\r\n//                 name: 'projectWithXliffmerge'\r\n//             };\r\n//             const xliffmergeConfigOptions: XlifmergeConfigOptions = {\r\n//                 project: xliffmergeProject.name,\r\n//                 file: 'xliffmerge.json',\r\n//                 xliffmergeOptions: {\r\n//                     i18nFormat: 'xlf2',\r\n//                     autotranslate: ['fr']\r\n//                 }\r\n//             };\r\n//             const globalPackageOptions: PackageJsonOptions = {\r\n//                 project: xliffmergeProject.name,\r\n//                 createExtractScriptCommandline: true,\r\n//                 xliffmergeConfigFilePath: `projects/${xliffmergeProject.name}/${xliffmergeConfigOptions.file}`,\r\n//                 languages: ['en', 'de'],\r\n//                 useCommandlineForLanguages: true\r\n//             };\r\n//             host = createHost([xliffmergeProject], [globalPackageOptions], [xliffmergeConfigOptions]);\r\n//             appTree = new UnitTestTree(new HostTree(host));\r\n//             let loggerOutput = '';\r\n//             testRunner.logger.subscribe(entry => {\r\n//                 loggerOutput = loggerOutput + entry.message;\r\n//             });\r\n//             expect(appTree.exists('/projects/projectWithXliffmerge/xliffmerge.json')).toBeTruthy('config file not found');\r\n//             appTree = testRunner.runSchematic('update-1', defaultOptions, appTree);\r\n\r\n//             // Check angular.json changes\r\n//             expect(loggerOutput).toContain('added architect builder xliffmerge to project projectWithXliffmerge');\r\n//             const angularJsonAfterMigration: WorkspaceSchema = readAngularJson(appTree);\r\n//             expect(angularJsonAfterMigration).toBeTruthy();\r\n//             // @ts-ignore\r\n//             const builderSpec = angularJsonAfterMigration.projects['projectWithXliffmerge'].architect[xliffmergeBuilderName];\r\n//             expect(builderSpec.builder).toBe('@ngx-i18nsupport/tooling:xliffmerge');\r\n//             // configuration should be transferred to builder spec\r\n//             expect(builderSpec.options.xliffmergeOptions.i18nFormat).toEqual('xlf2');\r\n//             expect(builderSpec.options.xliffmergeOptions.autotranslate).toEqual(['fr']);\r\n//             expect(builderSpec.options.xliffmergeOptions.languages).toEqual(['en', 'de']);\r\n\r\n//             // Check package.json changes\r\n//             expect(loggerOutput).toContain('added npm script to extract i18n message');\r\n//             const packageJsonAfterMigration: IPackageJson = readPackageJson(appTree, undefined);\r\n//             expect(packageJsonAfterMigration).toBeTruthy();\r\n//             expect(packageJsonAfterMigration.scripts[extractScriptName(xliffmergeProject.name, false)])\r\n//                 .toContain(`ng run ${xliffmergeProject.name}:${xliffmergeBuilderName}`);\r\n\r\n//             expect(packageJsonAfterMigration.devDependencies[xliffmergePackage]).toBe(xliffmergeVersion);\r\n\r\n//             // Check config file changes\r\n//             // config file should have been deleted\r\n//             expect(appTree.exists('/projects/projectWithXliffmerge/xliffmerge.json')).toBeFalsy();\r\n//         });\r\n\r\n//         it('should migrate extraction script without project name to script with project name', () => {\r\n//             const xliffmergeProject: ProjectOptions = {\r\n//                 name: 'projectWithXliffmerge',\r\n//                 isDefaultProject: false,\r\n//             };\r\n//             const xliffmergeConfigOptions: XlifmergeConfigOptions = {\r\n//                 project: xliffmergeProject.name,\r\n//                 file: 'xliffmerge.json',\r\n//                 xliffmergeOptions: {\r\n//                     i18nFormat: 'xlf2',\r\n//                     autotranslate: ['fr']\r\n//                 }\r\n//             };\r\n//             const globalPackageOptions: PackageJsonOptions = {\r\n//                 project: xliffmergeProject.name,\r\n//                 isDefaultProject: true,\r\n//                 createExtractScriptCommandline: true,\r\n//                 xliffmergeConfigFilePath: `projects/${xliffmergeProject.name}/${xliffmergeConfigOptions.file}`,\r\n//                 languages: ['en', 'de'],\r\n//                 useCommandlineForLanguages: true\r\n//             };\r\n//             host = createHost([xliffmergeProject], [globalPackageOptions], [xliffmergeConfigOptions]);\r\n//             appTree = new UnitTestTree(new HostTree(host));\r\n//             let loggerOutput = '';\r\n//             testRunner.logger.subscribe(entry => {\r\n//                 loggerOutput = loggerOutput + entry.message;\r\n//             });\r\n//             expect(appTree.exists('/projects/projectWithXliffmerge/xliffmerge.json')).toBeTruthy('config file not found');\r\n//             appTree = testRunner.runSchematic('update-1', defaultOptions, appTree);\r\n\r\n//             // Check angular.json changes\r\n//             expect(loggerOutput).toContain('removed script extract-i18n ');\r\n//             const angularJsonAfterMigration: WorkspaceSchema = readAngularJson(appTree);\r\n//             expect(angularJsonAfterMigration).toBeTruthy();\r\n//             // @ts-ignore\r\n//             const builderSpec = angularJsonAfterMigration.projects['projectWithXliffmerge'].architect[xliffmergeBuilderName];\r\n//             expect(builderSpec.builder).toBe('@ngx-i18nsupport/tooling:xliffmerge');\r\n//             // configuration should be transferred to builder spec\r\n//             expect(builderSpec.options.xliffmergeOptions.i18nFormat).toEqual('xlf2');\r\n//             expect(builderSpec.options.xliffmergeOptions.autotranslate).toEqual(['fr']);\r\n//             expect(builderSpec.options.xliffmergeOptions.languages).toEqual(['en', 'de']);\r\n\r\n//             // Check package.json changes\r\n//             expect(loggerOutput).toContain('added npm script to extract i18n message');\r\n//             const packageJsonAfterMigration: IPackageJson = readPackageJson(appTree, undefined);\r\n//             expect(packageJsonAfterMigration).toBeTruthy();\r\n//             expect(packageJsonAfterMigration.scripts[extractScriptName(xliffmergeProject.name, false)])\r\n//                 .toContain(`ng run ${xliffmergeProject.name}:${xliffmergeBuilderName}`);\r\n\r\n//             expect(packageJsonAfterMigration.devDependencies[xliffmergePackage]).toBe(xliffmergeVersion);\r\n\r\n//             // Check config file changes\r\n//             // config file should have been deleted\r\n//             expect(appTree.exists('/projects/projectWithXliffmerge/xliffmerge.json')).toBeFalsy();\r\n//         });\r\n\r\n//     });\r\n\r\n// });\r\n"]}